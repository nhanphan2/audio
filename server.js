// server.js
const express = require('express');
const cors = require('cors');
const rateLimit = require('express-rate-limit');
const crypto = require('crypto'); // Th√™m ƒë·ªÉ hash IP
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Chat sessions storage (in-memory)
let chatSessions = new Map();

// Middleware
app.use(cors({
    origin: process.env.FRONTEND_URL || ['http://localhost:3000', 'http://127.0.0.1:5500'], 
    credentials: true
}));

app.use(express.json({ limit: '10mb' }));
app.use(express.static('public'));

// Rate limiting
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000,
    max: 50,
    message: {
        error: 'Qu√° nhi·ªÅu y√™u c·∫ßu t·ª´ IP n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.'
    },
    standardHeaders: true,
    legacyHeaders: false,
});

app.use('/api/', limiter);

// Logging middleware
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.path} - IP: ${req.ip}`);
    next();
});

// ===== CHAT HISTORY FUNCTIONS =====

// L·∫•y IP th·∫≠t c·ªßa user
function getRealIP(req) {
    return req.headers['x-forwarded-for']?.split(',')[0]?.trim() || 
           req.headers['x-real-ip'] || 
           req.connection.remoteAddress || 
           req.socket.remoteAddress ||
           req.ip || 'unknown';
}

// Hash IP ƒë·ªÉ b·∫£o m·∫≠t
function hashIP(ip) {
    const salt = process.env.CHAT_SALT || 'default_chat_salt_2024';
    return crypto.createHash('sha256').update(ip + salt).digest('hex');
}

// D·ªçn d·∫πp sessions h·∫øt h·∫°n
function cleanupExpiredSessions() {
    const now = Date.now();
    let cleanedCount = 0;
    
    for (let [key, session] of chatSessions.entries()) {
        if (session.expiresAt < now) {
            chatSessions.delete(key);
            cleanedCount++;
        }
    }
    
    if (cleanedCount > 0) {
        console.log(`üßπ ƒê√£ x√≥a ${cleanedCount} chat sessions h·∫øt h·∫°n`);
    }
}

// L·∫•y ho·∫∑c t·∫°o session cho IP
function getOrCreateSession(ipHash) {
    cleanupExpiredSessions();
    
    let session = chatSessions.get(ipHash);
    const now = Date.now();
    
    if (!session || session.expiresAt < now) {
        // T·∫°o session m·ªõi
        session = {
            messages: [],
            createdAt: now,
            expiresAt: now + (24 * 60 * 60 * 1000), // 24h from now
            lastActivity: now
        };
        chatSessions.set(ipHash, session);
        console.log(`‚ú® T·∫°o chat session m·ªõi cho IP hash: ${ipHash.substring(0, 8)}...`);
    }
    
    return session;
}

// L∆∞u message v√†o session
function saveMessageToSession(ipHash, content, sender, images = []) {
    try {
        const session = getOrCreateSession(ipHash);
        const now = Date.now();
        
        session.messages.push({
            content: content,
            sender: sender, // 'user' ho·∫∑c 'ai'
            images: images,
            timestamp: now
        });
        
        session.lastActivity = now;
        chatSessions.set(ipHash, session);
        
        console.log(`üíæ ƒê√£ l∆∞u tin nh·∫Øn ${sender} cho IP hash: ${ipHash.substring(0, 8)}... (${session.messages.length} messages total)`);
        
        return true;
    } catch (error) {
        console.error('‚ùå L·ªói khi l∆∞u message v√†o session:', error);
        return false;
    }
}

// ===== EXISTING FUNCTIONS =====

// H√†m l∆∞u c√¢u h·ªèi v√†o Supabase
async function saveQuestion(question, userIP) {
    try {
        console.log('üîÑ ƒêang l∆∞u c√¢u h·ªèi v√†o Supabase...');
        console.log('üìù C√¢u h·ªèi:', question);
        console.log('üåê URL:', process.env.SUPABASE_URL);
        
        const response = await fetch(`${process.env.SUPABASE_URL}/rest/v1/questions`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'apikey': process.env.SUPABASE_ANON_KEY,
                'Authorization': `Bearer ${process.env.SUPABASE_ANON_KEY}`,
                'Prefer': 'return=representation'
            },
            body: JSON.stringify({
                question: question,
                user_ip: userIP
            })
        });

        console.log('üìä Response status:', response.status);
        
        if (response.ok) {
            const result = await response.json();
            console.log('‚úÖ ƒê√£ l∆∞u c√¢u h·ªèi v√†o Supabase:', result);
        } else {
            const error = await response.text();
            console.error('‚ùå L·ªói khi l∆∞u v√†o Supabase:', response.status, error);
        }
        
    } catch (error) {
        console.error('‚ùå Exception khi l∆∞u c√¢u h·ªèi:', error);
    }
}

// H√†m l·∫•y c√¢u h·ªèi t·ª´ Supabase
async function getQuestions(limit = 50) {
    try {
        console.log('üîç ƒêang l·∫•y c√¢u h·ªèi t·ª´ Supabase...');
        
        const response = await fetch(`${process.env.SUPABASE_URL}/rest/v1/questions?order=created_at.desc&limit=${limit}`, {
            headers: {
                'apikey': process.env.SUPABASE_ANON_KEY,
                'Authorization': `Bearer ${process.env.SUPABASE_ANON_KEY}`
            }
        });

        console.log('üìä Get questions status:', response.status);

        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ L·∫•y ƒë∆∞·ª£c c√¢u h·ªèi:', data.length);
            return data;
        } else {
            const error = await response.text();
            console.error('‚ùå L·ªói khi l·∫•y c√¢u h·ªèi:', response.status, error);
            return [];
        }
        
    } catch (error) {
        console.error('‚ùå Exception khi l·∫•y c√¢u h·ªèi:', error);
        return [];
    }
}

// H√†m ƒë·∫øm t·ªïng s·ªë c√¢u h·ªèi
async function countQuestions() {
    try {
        const response = await fetch(`${process.env.SUPABASE_URL}/rest/v1/questions?select=count`, {
            headers: {
                'apikey': process.env.SUPABASE_ANON_KEY,
                'Authorization': `Bearer ${process.env.SUPABASE_ANON_KEY}`,
                'Prefer': 'count=exact'
            }
        });

        if (response.ok) {
            const countHeader = response.headers.get('Content-Range');
            if (countHeader) {
                const count = countHeader.split('/')[1];
                return parseInt(count) || 0;
            }
        }
        return 0;
        
    } catch (error) {
        console.error('‚ùå L·ªói khi ƒë·∫øm c√¢u h·ªèi:', error);
        return 0;
    }
}

// DeepSeek API call function
async function callDeepSeek(message) {
    console.log('ü§ñ G·ªçi DeepSeek API...');
    
    const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${process.env.DEEPSEEK_API_KEY}`,
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            model: 'deepseek-chat',
            messages: [
                {
                    role: 'system',
                    content: 'B·∫°n l√† m·ªôt AI assistant h·ªØu √≠ch, th√¥ng minh v√† th√¢n thi·ªán. H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch t·ª± nhi√™n v√† chi ti·∫øt. Khi c√≥ th·ªÉ, h√£y cung c·∫•p v√≠ d·ª• c·ª• th·ªÉ v√† gi·∫£i th√≠ch r√µ r√†ng.'
                },
                {
                    role: 'user',
                    content: message
                }
            ],
            max_tokens: 2000,
            temperature: 0.7,
            top_p: 0.95,
            frequency_penalty: 0.1,
            presence_penalty: 0.1,
            stream: false
        })
    });

    console.log('üìä DeepSeek Response status:', response.status);

    if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå DeepSeek API Error:', errorText);
        
        let error;
        try {
            error = JSON.parse(errorText);
        } catch {
            error = { error: { message: errorText } };
        }
        
        throw new Error(`DeepSeek API Error: ${error.error?.message || 'Unknown error'}`);
    }

    const data = await response.json();
    console.log('‚úÖ DeepSeek Response received');
    
    return data.choices[0].message.content;
}

// ===== ROUTES =====

app.get('/', (req, res) => {
    res.json({ 
        message: 'DeepSeek Chat Backend ƒëang ho·∫°t ƒë·ªông!',
        timestamp: new Date().toISOString(),
        version: '2.1.0',
        ai_provider: 'DeepSeek AI',
        storage: 'Supabase PostgreSQL',
        chat_history: 'In-Memory (24h)',
        features: ['Chat History', 'IP-based Sessions', 'Auto Cleanup'],
        env_check: {
            supabase_url: !!process.env.SUPABASE_URL,
            supabase_key: !!process.env.SUPABASE_ANON_KEY,
            deepseek_key: !!process.env.DEEPSEEK_API_KEY,
            chat_salt: !!process.env.CHAT_SALT
        }
    });
});

// ===== NEW CHAT HISTORY ENDPOINTS =====

// L·∫•y l·ªãch s·ª≠ chat theo IP
app.get('/api/chat/history', (req, res) => {
    try {
        cleanupExpiredSessions();
        
        const ip = getRealIP(req);
        const ipHash = hashIP(ip);
        const session = chatSessions.get(ipHash);
        
        if (session && session.expiresAt > Date.now()) {
            console.log(`üìñ Tr·∫£ v·ªÅ ${session.messages.length} tin nh·∫Øn cho IP hash: ${ipHash.substring(0, 8)}...`);
            res.json({ 
                success: true, 
                messages: session.messages,
                sessionInfo: {
                    messageCount: session.messages.length,
                    createdAt: session.createdAt,
                    expiresAt: session.expiresAt,
                    timeRemaining: Math.max(0, session.expiresAt - Date.now())
                }
            });
        } else {
            console.log(`üì≠ Kh√¥ng c√≥ l·ªãch s·ª≠ chat cho IP hash: ${ipHash.substring(0, 8)}...`);
            res.json({ 
                success: true, 
                messages: [],
                sessionInfo: null
            });
        }
    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y l·ªãch s·ª≠ chat:', error);
        res.status(500).json({ 
            success: false, 
            error: error.message 
        });
    }
});

// L∆∞u tin nh·∫Øn v√†o l·ªãch s·ª≠
app.post('/api/chat/save', (req, res) => {
    try {
        const { message, sender, images = [] } = req.body;
        
        // Validation
        if (!message || !sender) {
            return res.status(400).json({ 
                success: false, 
                error: 'message v√† sender l√† b·∫Øt bu·ªôc' 
            });
        }
        
        if (!['user', 'ai'].includes(sender)) {
            return res.status(400).json({ 
                success: false, 
                error: 'sender ph·∫£i l√† "user" ho·∫∑c "ai"' 
            });
        }
        
        const ip = getRealIP(req);
        const ipHash = hashIP(ip);
        
        const success = saveMessageToSession(ipHash, message, sender, images);
        
        if (success) {
            res.json({ success: true });
        } else {
            res.status(500).json({ 
                success: false, 
                error: 'Kh√¥ng th·ªÉ l∆∞u tin nh·∫Øn' 
            });
        }
        
    } catch (error) {
        console.error('‚ùå L·ªói khi l∆∞u tin nh·∫Øn:', error);
        res.status(500).json({ 
            success: false, 
            error: error.message 
        });
    }
});

// X√≥a l·ªãch s·ª≠ chat (optional)
app.delete('/api/chat/clear', (req, res) => {
    try {
        const ip = getRealIP(req);
        const ipHash = hashIP(ip);
        
        if (chatSessions.has(ipHash)) {
            chatSessions.delete(ipHash);
            console.log(`üóëÔ∏è ƒê√£ x√≥a l·ªãch s·ª≠ chat cho IP hash: ${ipHash.substring(0, 8)}...`);
            res.json({ success: true, message: 'ƒê√£ x√≥a l·ªãch s·ª≠ chat' });
        } else {
            res.json({ success: true, message: 'Kh√¥ng c√≥ l·ªãch s·ª≠ chat ƒë·ªÉ x√≥a' });
        }
        
    } catch (error) {
        console.error('‚ùå L·ªói khi x√≥a l·ªãch s·ª≠ chat:', error);
        res.status(500).json({ 
            success: false, 
            error: error.message 
        });
    }
});

// ===== EXISTING CHAT ENDPOINT (MODIFIED) =====

app.post('/api/chat', async (req, res) => {
    try {
        const { message, images } = req.body;

        console.log('üì© Nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn:', message);
        if (images && images.length > 0) {
            console.log('üñºÔ∏è C√≥ h√¨nh ·∫£nh ƒë√≠nh k√®m:', images.length);
        }

        // Validation
        if (!message || typeof message !== 'string') {
            return res.status(400).json({ 
                error: 'Tin nh·∫Øn kh√¥ng h·ª£p l·ªá' 
            });
        }

        if (message.length > 4000) {
            return res.status(400).json({ 
                error: 'Tin nh·∫Øn qu√° d√†i (t·ªëi ƒëa 4000 k√Ω t·ª±)' 
            });
        }

        if (!process.env.DEEPSEEK_API_KEY) {
            return res.status(500).json({ 
                error: 'Server ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh DeepSeek API key' 
            });
        }

        // L∆∞u c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng v√†o Supabase (existing function)
        await saveQuestion(message.trim(), req.ip);

        // X·ª≠ l√Ω h√¨nh ·∫£nh (n·∫øu c√≥) - DeepSeek c√≥ th·ªÉ h·ªó tr·ª£ vision trong t∆∞∆°ng lai
        let fullMessage = message.trim();
        if (images && images.length > 0) {
            fullMessage += `\n\n[Ng∆∞·ªùi d√πng ƒë√£ g·ª≠i ${images.length} h√¨nh ·∫£nh ƒë√≠nh k√®m]`;
        }

        // G·ªçi DeepSeek API
        const aiResponse = await callDeepSeek(fullMessage);

        // NOTE: Chat history ƒë∆∞·ª£c l∆∞u th√¥ng qua frontend call t·ªõi /api/chat/save
        // Kh√¥ng auto-save ·ªü ƒë√¢y ƒë·ªÉ tr√°nh duplicate khi load l·∫°i trang

        res.json({ 
            response: aiResponse,
            timestamp: new Date().toISOString(),
            provider: 'DeepSeek AI',
            model: 'deepseek-chat'
        });

    } catch (error) {
        console.error('Error in /api/chat:', error);
        
        if (error.message.includes('insufficient_quota') || error.message.includes('quota')) {
            res.status(503).json({ 
                error: 'ƒê√£ h·∫øt h·∫°n m·ª©c s·ª≠ d·ª•ng API DeepSeek. Vui l√≤ng th·ª≠ l·∫°i sau.' 
            });
        } else if (error.message.includes('rate_limit') || error.message.includes('too_many_requests')) {
            res.status(429).json({ 
                error: 'Qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng ch·ªù m·ªôt ch√∫t.' 
            });
        } else if (error.message.includes('invalid_api_key')) {
            res.status(401).json({ 
                error: 'API key kh√¥ng h·ª£p l·ªá.' 
            });
        } else {
            res.status(500).json({ 
                error: 'C√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi DeepSeek AI. Vui l√≤ng th·ª≠ l·∫°i sau.',
                details: process.env.NODE_ENV === 'development' ? error.message : undefined
            });
        }
    }
});

// ===== EXISTING ENDPOINTS =====

// API ƒë·ªÉ xem c√°c c√¢u h·ªèi ƒë√£ l∆∞u t·ª´ Supabase
app.get('/api/questions', async (req, res) => {
    try {
        const questions = await getQuestions(50);
        const total = await countQuestions();
        
        console.log(`üìñ Tr·∫£ v·ªÅ ${questions.length}/${total} c√¢u h·ªèi t·ª´ Supabase`);
        
        res.json({
            total: total,
            questions: questions,
            storage: "Supabase PostgreSQL - Persistent storage",
            ai_provider: "DeepSeek AI",
            serverTime: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå L·ªói khi ƒë·ªçc c√¢u h·ªèi t·ª´ Supabase:', error.message);
        res.json({ 
            total: 0, 
            questions: [], 
            error: error.message,
            storage: "Supabase connection failed"
        });
    }
});

// Health check endpoint
app.get('/health', async (req, res) => {
    try {
        const count = await countQuestions();
        cleanupExpiredSessions();
        
        // Test DeepSeek API connection
        let deepseekStatus = 'Unknown';
        try {
            await callDeepSeek('Hello');
            deepseekStatus = 'Connected';
        } catch (error) {
            deepseekStatus = `Error: ${error.message}`;
        }
        
        res.json({ 
            status: 'OK', 
            timestamp: new Date().toISOString(),
            database: 'Connected to Supabase',
            ai_provider: 'DeepSeek AI',
            deepseek_status: deepseekStatus,
            questionsCount: count,
            chatSessions: {
                active: chatSessions.size,
                totalMessages: Array.from(chatSessions.values()).reduce((sum, session) => sum + session.messages.length, 0)
            }
        });
    } catch (error) {
        res.json({ 
            status: 'DEGRADED', 
            timestamp: new Date().toISOString(),
            database: 'Supabase connection failed',
            ai_provider: 'DeepSeek AI',
            error: error.message
        });
    }
});

// API endpoint ƒë·ªÉ test DeepSeek connection
app.get('/api/test-deepseek', async (req, res) => {
    try {
        const testResponse = await callDeepSeek('Xin ch√†o! B·∫°n c√≥ th·ªÉ tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát kh√¥ng?');
        res.json({
            success: true,
            message: 'DeepSeek API ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng',
            test_response: testResponse,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// API ƒë·ªÉ xem th·ªëng k√™ chat sessions (debug)
app.get('/api/chat/stats', (req, res) => {
    try {
        cleanupExpiredSessions();
        
        const stats = {
            totalSessions: chatSessions.size,
            totalMessages: 0,
            sessionsInfo: []
        };
        
        for (let [ipHash, session] of chatSessions.entries()) {
            stats.totalMessages += session.messages.length;
            stats.sessionsInfo.push({
                ipHash: ipHash.substring(0, 8) + '...',
                messageCount: session.messages.length,
                createdAt: new Date(session.createdAt).toISOString(),
                expiresAt: new Date(session.expiresAt).toISOString(),
                timeRemaining: Math.max(0, session.expiresAt - Date.now())
            });
        }
        
        res.json(stats);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// 404 handler
app.use('*', (req, res) => {
    res.status(404).json({ error: 'Endpoint kh√¥ng t·ªìn t·∫°i' });
});

// Error handler
app.use((error, req, res, next) => {
    console.error('Unhandled error:', error);
    res.status(500).json({ error: 'L·ªói server kh√¥ng x√°c ƒë·ªãnh' });
});

// Cleanup expired sessions every hour
setInterval(() => {
    cleanupExpiredSessions();
}, 60 * 60 * 1000); // 1 hour

// Start server
app.listen(PORT, () => {
    console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i port ${PORT}`);
    console.log(`üì± Health check: http://localhost:${PORT}/health`);
    console.log(`ü§ñ API endpoint: http://localhost:${PORT}/api/chat`);
    console.log(`üìù Xem c√¢u h·ªèi: http://localhost:${PORT}/api/questions`);
    console.log(`üß™ Test DeepSeek: http://localhost:${PORT}/api/test-deepseek`);
    console.log(`üí¨ Chat history: http://localhost:${PORT}/api/chat/history`);
    console.log(`üìä Chat stats: http://localhost:${PORT}/api/chat/stats`);
    
    console.log('\nüîß Ki·ªÉm tra c·∫•u h√¨nh:');
    if (!process.env.DEEPSEEK_API_KEY) {
        console.warn('‚ö†Ô∏è  C·∫¢NH B√ÅO: Ch∆∞a c√≥ DEEPSEEK_API_KEY trong file .env');
    } else {
        console.log('‚úÖ DEEPSEEK_API_KEY ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh');
    }
    
    if (!process.env.SUPABASE_URL) {
        console.warn('‚ö†Ô∏è  C·∫¢NH B√ÅO: Ch∆∞a c√≥ SUPABASE_URL trong file .env');
    } else {
        console.log('‚úÖ SUPABASE_URL ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh');
    }
    
    if (!process.env.SUPABASE_ANON_KEY) {
        console.warn('‚ö†Ô∏è  C·∫¢NH B√ÅO: Ch∆∞a c√≥ SUPABASE_ANON_KEY trong file .env');
    } else {
        console.log('‚úÖ SUPABASE_ANON_KEY ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh');
    }
    
    if (!process.env.CHAT_SALT) {
        console.warn('‚ö†Ô∏è  C·∫¢NH B√ÅO: N√™n th√™m CHAT_SALT v√†o file .env ƒë·ªÉ b·∫£o m·∫≠t t·ªët h∆°n');
    } else {
        console.log('‚úÖ CHAT_SALT ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh');
    }
    
    console.log('\nü§ñ AI Provider: DeepSeek AI');
    console.log('üìñ Model: deepseek-chat');
    console.log('üíæ Chat Storage: In-Memory (24h auto-cleanup)');
});

module.exports = app;